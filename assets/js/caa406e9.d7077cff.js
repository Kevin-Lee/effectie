(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{102:function(n,e,r){"use strict";r.d(e,"a",(function(){return p})),r.d(e,"b",(function(){return m}));var t=r(0),a=r.n(t);function o(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function i(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function c(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){o(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function l(n,e){if(null==n)return{};var r,t,a=function(n,e){if(null==n)return{};var r,t,a={},o=Object.keys(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||(a[r]=n[r]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(a[r]=n[r])}return a}var u=a.a.createContext({}),d=function(n){var e=a.a.useContext(u),r=e;return n&&(r="function"==typeof n?n(e):c(c({},e),n)),r},p=function(n){var e=d(n.components);return a.a.createElement(u.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return a.a.createElement(a.a.Fragment,{},e)}},f=a.a.forwardRef((function(n,e){var r=n.components,t=n.mdxType,o=n.originalType,i=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),p=d(r),f=t,m=p["".concat(i,".").concat(f)]||p[f]||s[f]||o;return r?a.a.createElement(m,c(c({ref:e},u),{},{components:r})):a.a.createElement(m,c({ref:e},u))}));function m(n,e){var r=arguments,t=e&&e.mdxType;if("string"==typeof n||t){var o=r.length,i=new Array(o);i[0]=f;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c.mdxType="string"==typeof n?n:t,i[1]=c;for(var u=2;u<o;u++)i[u]=r[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},89:function(n,e,r){"use strict";r.r(e),r.d(e,"frontMatter",(function(){return i})),r.d(e,"metadata",(function(){return c})),r.d(e,"toc",(function(){return l})),r.d(e,"default",(function(){return d}));var t=r(3),a=r(8),o=(r(0),r(102)),i={id:"can-handle-error",title:"CanHandleError"},c={unversionedId:"monix/can-handle-error",id:"monix/can-handle-error",isDocsHomePage:!1,title:"CanHandleError",description:"CanHandleError",source:"@site/../generated-docs/target/mdoc/monix/can-handle-error.md",sourceDirName:"monix",slug:"/monix/can-handle-error",permalink:"/docs/monix/can-handle-error",version:"current",frontMatter:{id:"can-handle-error",title:"CanHandleError"},sidebar:"someSidebar",previous:{title:"CanCatch",permalink:"/docs/monix/can-catch"},next:{title:"FromFuture",permalink:"/docs/monix/from-future"}},l=[{value:"CanHandleError",id:"canhandleerror",children:[]},{value:"CanHandleError.handleNonFatal",id:"canhandleerrorhandlenonfatal",children:[]}],u={toc:l};function d(n){var e=n.components,r=Object(a.a)(n,["components"]);return Object(o.b)("wrapper",Object(t.a)({},u,r,{components:e,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"canhandleerror"},"CanHandleError"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"CanHandleError")," is a typeclass to handle ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable")," and to recover from it.\nIt looks like this."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"trait CanHandleError[F[_]] {\n\n  def handleNonFatalWith[A, AA >: A](\n      fa: => F[A]\n    )(\n      handleError: Throwable => F[AA]\n    ): F[AA]\n\n  def handleEitherTNonFatalWith[A, AA >: A, B, BB >: B](\n      efab: => EitherT[F, A, B]\n    )(\n      handleError: Throwable => F[Either[AA, BB]]\n    ): EitherT[F, AA, BB]\n\n  def handleNonFatal[A, AA >: A](\n      fa: => F[A]\n    )(\n      handleError: Throwable => AA\n    ): F[AA]\n\n  def handleEitherTNonFatal[A, AA >: A, B, BB >: B](\n      efab: => EitherT[F, A, B]\n    )(\n      handleError: Throwable => Either[AA, BB]\n    ): EitherT[F, AA, BB]\n\n}\n")),Object(o.b)("p",null,"There are instances available for ",Object(o.b)("inlineCode",{parentName:"p"},"monix.eval.Task"),", ",Object(o.b)("inlineCode",{parentName:"p"},"scala.concurrent.Future")," and ",Object(o.b)("inlineCode",{parentName:"p"},"cats.Id"),"."),Object(o.b)("h2",{id:"canhandleerrorhandlenonfatal"},"CanHandleError.handleNonFatal"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport monix.eval._\n\nimport effectie.monix._\nimport effectie.monix.Effectful._\n\nimport scala.util.control.NonFatal\n\nclass InvalidNumberException(n: Int, message: String) extends RuntimeException(message)\n\ndef foo(n: Int): Int = \n  if (n < 0)\n    throw new InvalidNumberException(n, s"n cannot be a negative Int. n: $n") \n  else\n     n\n\ndef bar[F[_]: EffectConstructor: CanHandleError](n: Int): F[Int] =\n  CanHandleError[F].handleNonFatalWith(effectOf(foo(n))) {\n    case NonFatal(err) =>\n      pureOf(0)\n  }\n  \nimport monix.execution.Scheduler.Implicits.global\n  \nprintln(bar[Task](1).runSyncUnsafe())\n// 1\nprintln(bar[Task](-1).runSyncUnsafe())\n// 0\n \nprintln(bar[Id](1))\n// 1\nprintln(bar[Id](-1))\n// 0\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import effectie.monix._\nimport effectie.monix.Effectful._\n\nimport scala.util.control.NonFatal\n\nimport effectie.concurrent.ExecutorServiceOps\nimport java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nobject MyApp {\n    \n  class InvalidNumberException(n: Int, message: String) extends RuntimeException(message)\n  \n  def foo(n: Int): Int = \n    if (n < 0)\n      throw new InvalidNumberException(n, s"n cannot be a negative Int. n: $n") \n    else\n       n\n  \n  def bar[F[_]: EffectConstructor: CanHandleError](n: Int): F[Int] =\n    CanHandleError[F].handleNonFatalWith(effectOf(foo(n))) {\n      case NonFatal(err) =>\n        pureOf(0)\n    }\n\n  def main(args: Array[String]): Unit = {\n    \n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors() >> 1)\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      println(Await.result(bar[Future](1), 1.second))\n      println(Await.result(bar[Future](-1), 1.second))\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\n\nMyApp.main(Array.empty)\n// 1\n// 0\n')))}d.isMDXComponent=!0}}]);