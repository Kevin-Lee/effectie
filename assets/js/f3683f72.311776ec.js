(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{102:function(e,n,a){"use strict";a.d(n,"a",(function(){return d})),a.d(n,"b",(function(){return p}));var t=a(0),r=a.n(t);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),b=function(e){var n=r.a.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=b(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=b(a),m=t,p=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return a?r.a.createElement(p,l(l({ref:n},s),{},{components:a})):r.a.createElement(p,l({ref:n},s))}));function p(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:t,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},104:function(e,n,a){"use strict";function t(e){var n,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(a=t(e[n]))&&(r&&(r+=" "),r+=a);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}n.a=function(){for(var e,n,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(n=t(e))&&(r&&(r+=" "),r+=n);return r}},108:function(e,n,a){"use strict";var t=a(0),r=a(109);n.a=function(){var e=Object(t.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},109:function(e,n,a){"use strict";var t=a(0),r=Object(t.createContext)(void 0);n.a=r},115:function(e,n,a){"use strict";var t=a(0),r=a.n(t),o=a(108),i=a(104),l=a(55),c=a.n(l);var s=37,b=39;n.a=function(e){var n=e.lazy,a=e.block,l=e.defaultValue,d=e.values,u=e.groupId,m=e.className,p=Object(o.a)(),h=p.tabGroupChoices,f=p.setTabGroupChoices,v=Object(t.useState)(l),g=v[0],E=v[1],w=t.Children.toArray(e.children),y=[];if(null!=u){var O=h[u];null!=O&&O!==g&&d.some((function(e){return e.value===O}))&&E(O)}var x=function(e){var n=e.currentTarget,a=y.indexOf(n),t=d[a].value;E(t),null!=u&&(f(u,t),setTimeout((function(){var e,a,t,r,o,i,l,s;(e=n.getBoundingClientRect(),a=e.top,t=e.left,r=e.bottom,o=e.right,i=window,l=i.innerHeight,s=i.innerWidth,a>=0&&o<=s&&r<=l&&t>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(c.a.tabItemActive),setTimeout((function(){return n.classList.remove(c.a.tabItemActive)}),2e3))}),150))},j=function(e){var n,a;switch(e.keyCode){case b:var t=y.indexOf(e.target)+1;a=y[t]||y[0];break;case s:var r=y.indexOf(e.target)-1;a=y[r]||y[y.length-1]}null===(n=a)||void 0===n||n.focus()};return r.a.createElement("div",{className:"tabs-container"},r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":a},m)},d.map((function(e){var n=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:g===n?0:-1,"aria-selected":g===n,className:Object(i.a)("tabs__item",c.a.tabItem,{"tabs__item--active":g===n}),key:n,ref:function(e){return y.push(e)},onKeyDown:j,onFocus:x,onClick:x},a)}))),n?Object(t.cloneElement)(w.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},w.map((function(e,n){return Object(t.cloneElement)(e,{key:n,hidden:e.props.value!==g})}))))}},116:function(e,n,a){"use strict";var t=a(0),r=a.n(t);n.a=function(e){var n=e.children,a=e.hidden,t=e.className;return r.a.createElement("div",{role:"tabpanel",hidden:a,className:t},n)}},97:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return c})),a.d(n,"metadata",(function(){return s})),a.d(n,"toc",(function(){return b})),a.d(n,"default",(function(){return u}));var t=a(3),r=a(8),o=(a(0),a(102)),i=a(115),l=a(116),c={id:"can-catch",title:"CanCatch"},s={unversionedId:"scalaz-effect/can-catch",id:"scalaz-effect/can-catch",isDocsHomePage:!1,title:"CanCatch",description:"CanCatch",source:"@site/../generated-docs/target/mdoc/scalaz-effect/can-catch.md",sourceDirName:"scalaz-effect",slug:"/scalaz-effect/can-catch",permalink:"/docs/scalaz-effect/can-catch",version:"current",frontMatter:{id:"can-catch",title:"CanCatch"},sidebar:"someSidebar",previous:{title:"EffectConstructor",permalink:"/docs/scalaz-effect/effect-constructor"},next:{title:"OptionTSupport",permalink:"/docs/scalaz-effect/optiont-support"}},b=[{value:"CanCatch",id:"cancatch",children:[]},{value:"CanCatch.catchNonFatal",id:"cancatchcatchnonfatal",children:[{value:"How to Use",id:"how-to-use",children:[]},{value:"Happy Path Example",id:"happy-path-example",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example",children:[]}]},{value:"CanCatch.catchNonFatalEither",id:"cancatchcatchnonfataleither",children:[{value:"How to Use",id:"how-to-use-1",children:[]},{value:"Happy Path Example",id:"happy-path-example-1",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example-1",children:[]}]},{value:"CanCatch.catchNonFatalEitherT",id:"cancatchcatchnonfataleithert",children:[{value:"How to Use",id:"how-to-use-2",children:[]},{value:"Happy Path Example",id:"happy-path-example-2",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example-2",children:[]}]},{value:"Catching",id:"catching",children:[]},{value:"Catching.catchNonFatal",id:"catchingcatchnonfatal",children:[{value:"How to Use",id:"how-to-use-3",children:[]},{value:"Happy Path Example",id:"happy-path-example-3",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example-3",children:[]}]},{value:"Catching.catchNonFatalEither",id:"catchingcatchnonfataleither",children:[{value:"How to Use",id:"how-to-use-4",children:[]},{value:"Happy Path Example",id:"happy-path-example-4",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example-4",children:[]}]},{value:"Catching.catchNonFatalEitherT",id:"catchingcatchnonfataleithert",children:[{value:"How to Use",id:"how-to-use-5",children:[]},{value:"Happy Path Example",id:"happy-path-example-5",children:[]},{value:"Unhappy Path Example",id:"unhappy-path-example-5",children:[]}]}],d={toc:b};function u(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},d,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"cancatch"},"CanCatch"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"CanCatch")," lets you catch ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable")," in the ",Object(o.b)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",Object(o.b)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". It takes a function from ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"trait CanCatch[F[_]] {\n  def catchNonFatal[A, B](fb: => F[B])(f: Throwable => A): F[A \\/ B]\n\n  def catchNonFatalEither[A, B](fab: => F[A \\/ B])(f: Throwable => A): F[A \\/ B]\n\n  def catchNonFatalEitherT[A, B](fab: => EitherT[F, A, B])(f: Throwable => A): EitherT[F, A, B]\n}\n")),Object(o.b)("h2",{id:"cancatchcatchnonfatal"},"CanCatch.catchNonFatal"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatal[A, B]")," lets you catch ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable")," from ",Object(o.b)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",Object(o.b)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),Object(o.b)("h3",{id:"how-to-use"},"How to Use"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz.effect._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[IO].catchNonFatal(\n    IO(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: IO[scalaz.\\/[Throwable, Nothing]] = scalaz.effect.IO$$anon$7@5ee7e73d\n\nfa.unsafePerformIO()\n// res1: scalaz.\\/[Throwable, Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.scalaz._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@4cc86465[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@1af9fdc0\n\nval fa = CanCatch[Future].catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[scalaz.\\/[Throwable, Nothing]] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res3: scalaz.\\/[Throwable, Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\n\nCanCatch[Id].catchNonFatal(\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res5: Throwable \\/ Nothing = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),Object(o.b)("h3",{id:"happy-path-example"},"Happy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@2662508c\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 202)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(202)\n// Result is 202\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 202)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),Object(o.b)("h3",{id:"unhappy-path-example"},"Unhappy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-101)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@35294466\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),Object(o.b)("h2",{id:"cancatchcatchnonfataleither"},"CanCatch.catchNonFatalEither"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEither[A, B]")," lets you catch ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable")," from ",Object(o.b)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"\nand returns ",Object(o.b)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),Object(o.b)("h3",{id:"how-to-use-1"},"How to Use"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[IO].catchNonFatalEither(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: IO[Throwable \\/ Int] = scalaz.effect.IO$$anon$7@8fc6ba7\n\nfa.unsafePerformIO()\n// res19: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\n\nimport effectie.scalaz._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@51871282[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@3acdea46\n\nval fa = CanCatch[Future].catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: Future[Throwable \\/ Int] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res21: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\n\nCanCatch[Id].catchNonFatalEither(\n    (throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int\n  )(identity)\n// res23: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),Object(o.b)("h3",{id:"happy-path-example-1"},"Happy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@47a56298\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),Object(o.b)("h3",{id:"unhappy-path-example-1"},"Unhappy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@3aef9256\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),Object(o.b)("h2",{id:"cancatchcatchnonfataleithert"},"CanCatch.catchNonFatalEitherT"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"CanCatch[F].catchNonFatalEitherT[A, B]")," lets you catch ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable")," from ",Object(o.b)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"\nand returns ",Object(o.b)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),Object(o.b)("h3",{id:"how-to-use-2"},"How to Use"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[IO].catchNonFatalEitherT(\n    EitherT(IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[IO, Throwable, Int] = EitherT(\n//   run = scalaz.effect.IO$$anon$7@32c8fcb0\n// )\n\nfa.run.unsafePerformIO()\n// res37: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport effectie.scalaz._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@29c90af1[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@5c915e04\n\nval fa = CanCatch[Future].catchNonFatalEitherT(\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   run = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.run, Duration.Inf)\n// res39: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\n\nval fa = CanCatch[Id].catchNonFatalEitherT(\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Throwable \\/ Int])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   run = -\\/(a = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.run\n// res41: Id[Throwable \\/ Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),Object(o.b)("h3",{id:"happy-path-example-2"},"Happy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@7f7cb4a7\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),Object(o.b)("h3",{id:"unhappy-path-example-2"},"Unhappy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.scalaz.Effectful._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@1186cdac\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    CanCatch[F].catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  CanCatch[F].catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),Object(o.b)("h2",{id:"catching"},"Catching"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Catching.catchNonFatal")," provides a convenient way to use ",Object(o.b)("inlineCode",{parentName:"p"},"CanCatch")," to catch ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable")," in the ",Object(o.b)("inlineCode",{parentName:"p"},"F[A]"),"\nand turned it into ",Object(o.b)("inlineCode",{parentName:"p"},"F[Either[Throwable, A]]"),". Just like ",Object(o.b)("inlineCode",{parentName:"p"},"CanCatch"),", it takes a function from ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable"),"\nto your own error type, yet it can handle only ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ones as already mentioned."),Object(o.b)("h2",{id:"catchingcatchnonfatal"},"Catching.catchNonFatal"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"catchNonFatal")," lets you catch ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable")," from ",Object(o.b)("inlineCode",{parentName:"p"},"F[B]"),"\nand returns ",Object(o.b)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),Object(o.b)("h3",{id:"how-to-use-3"},"How to Use"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz.effect._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatal(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Int)\n  )(identity)\n// fa: IO[scalaz.\\/[Throwable, Int]] = scalaz.effect.IO$$anon$7@55f283e4\n\nfa.unsafePerformIO()\n// res55: scalaz.\\/[Throwable, Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport effectie.scalaz.Catching._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@42302cec[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@39c7aed\n\nval fa = catchNonFatal(\n    Future(throw new RuntimeException(\"Something's wrong!\"))\n  )(identity)\n// fa: Future[scalaz.\\/[Throwable, Nothing]] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res57: scalaz.\\/[Throwable, Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz.Catching._\n\ncatchNonFatal[Id](\n    throw new RuntimeException(\"Something's wrong!\")\n  )(identity)\n// res59: Id[Throwable \\/ Nothing] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),Object(o.b)("h3",{id:"happy-path-example-3"},"Happy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@1bd0f47\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 202)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(arg: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(202)\n// Result is 202\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 202)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 202\n')))),Object(o.b)("h3",{id:"unhappy-path-example-3"},"Unhappy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-101)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@24164093\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  }\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatal(\n      for {\n        a <- pureOf(n + 100)\n        b <- effectOf(doSomethingBad(a))\n      } yield b\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](-101)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1])\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n}\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatal(\n    for {\n      a <- pureOf(n + 100)\n      b <- effectOf(doSomethingBad(a))\n    } yield b\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-101)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(MyError.NonFatalThrowable(a)) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with java.lang.IllegalArgumentException: n cannot be a negative number. [n: -1]\n')))),Object(o.b)("h2",{id:"catchingcatchnonfataleither"},"Catching.catchNonFatalEither"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEither")," provides a convenient way to use ",Object(o.b)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable")," from ",Object(o.b)("inlineCode",{parentName:"p"},"F[A \\/ B]")," and returns ",Object(o.b)("inlineCode",{parentName:"p"},"F[A \\/ B]"),"."),Object(o.b)("h3",{id:"how-to-use-4"},"How to Use"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatalEither(\n    IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: IO[Throwable \\/ Int] = scalaz.effect.IO$$anon$7@58c45496\n\nfa.unsafePerformIO()\n// res73: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\n\nimport effectie.scalaz.Catching._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@246ed2e6[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@5ef45219\n\nval fa = catchNonFatalEither(\n    Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int)\n  )(identity)\n// fa: Future[Throwable \\/ Int] = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa, Duration.Inf)\n// res75: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz.Catching._\n\ncatchNonFatalEither[Id](\n    (throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int\n  )(identity)\n// res77: Id[Throwable \\/ Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),Object(o.b)("h3",{id:"happy-path-example-4"},"Happy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@2ec082b5\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n\n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n  \n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n\n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),Object(o.b)("h3",{id:"unhappy-path-example-4"},"Unhappy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@40ea7553\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEither(\n      for {\n        aOrB <- pureOf(divide100By(n))\n        c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n      } yield c\n    )(MyError.nonFatalThrowable)\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEither(\n    for {\n      aOrB <- pureOf(divide100By(n))\n      c <- effectOf(aOrB.map(b => doSomethingBad(b)))\n    } yield c\n  )(MyError.nonFatalThrowable)\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))),Object(o.b)("h2",{id:"catchingcatchnonfataleithert"},"Catching.catchNonFatalEitherT"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Catching.catchNonFatalEitherT")," provides a convenient way to use ",Object(o.b)("inlineCode",{parentName:"p"},"CanCatch"),"\nto catch ",Object(o.b)("inlineCode",{parentName:"p"},"NonFatal")," ",Object(o.b)("inlineCode",{parentName:"p"},"Throwable")," from ",Object(o.b)("inlineCode",{parentName:"p"},"EitherT[F, A, B]")," and returns ",Object(o.b)("inlineCode",{parentName:"p"},"EitherT[F, A, B]"),"."),Object(o.b)("h3",{id:"how-to-use-5"},"How to Use"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatalEitherT[IO](\n    EitherT(IO((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[IO, Throwable, Int] = EitherT(\n//   run = scalaz.effect.IO$$anon$7@7d01b15c\n// )\n\nfa.run.unsafePerformIO()\n// res91: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\n\nimport effectie.scalaz.Catching._\n\nval executorService: ExecutorService = Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n// executorService: ExecutorService = java.util.concurrent.ForkJoinPool@6a60198d[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\nimplicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n// ec: ExecutionContext = scala.concurrent.impl.ExecutionContextImpl$$anon$4@1a1bcecc\n\nval fa = catchNonFatalEitherT[Future](\n    EitherT(Future((throw new RuntimeException(\"Something's wrong!\")): Throwable \\/ Int))\n  )(identity)\n// fa: EitherT[Future, Throwable, Int] = EitherT(\n//   run = Future(Success(-\\/(java.lang.RuntimeException: Something's wrong!)))\n// )\n\n// Just for this example, you wouldn't want to do it in your production code\nAwait.result(fa.run, Duration.Inf)\n// res93: Throwable \\/ Int = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n"))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},"import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz.Catching._\n\nval fa = catchNonFatalEitherT[Id](\n    EitherT((throw new RuntimeException(\"Something's wrong!\")): Id[Throwable \\/ Int])\n  )(identity)\n// fa: EitherT[Id, Throwable, Int] = EitherT(\n//   run = -\\/(a = java.lang.RuntimeException: Something's wrong!)\n// )\n\nfa.run\n// res95: Id[Throwable \\/ Int] = -\\/(\n//   a = java.lang.RuntimeException: Something's wrong!\n// )\n")))),Object(o.b)("h3",{id:"happy-path-example-5"},"Happy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@712ca671\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = \\/-(b = 200)\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// \\/-(200)\n// Result is 200\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](1)\n// fa: Id[MyError \\/ Int] = \\/-(b = 200)\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result is 200\n')))),Object(o.b)("h3",{id:"unhappy-path-example-5"},"Unhappy Path Example"),Object(o.b)(i.a,{groupId:"effects",defaultValue:"io",values:[{label:"IO",value:"io"},{label:"Future",value:"future"},{label:"Id",value:"id"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"io",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\nimport scalaz.effect._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\nif (n < 0)\n  throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\nelse\n  n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[IO](-1)\n// fa: IO[MyError \\/ Int] = scalaz.effect.IO$$anon$7@7efcced6\nval result = fa.unsafePerformIO()\n// result: MyError \\/ Int = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nresult match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),Object(o.b)(l.a,{value:"future",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import java.util.concurrent.{ExecutorService, Executors}\nimport scala.concurrent.{ExecutionContext, Future, Await}\nimport scala.concurrent.duration._\n\nimport scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\nimport effectie.concurrent.ExecutorServiceOps\n\nobject MyApp {\n  sealed trait MyError\n  object MyError {\n    final case class NonFatalThrowable(throwable: Throwable) extends MyError\n    case object DivideByZero extends MyError\n    \n    def nonFatalThrowable(throwable: Throwable): MyError\n      = NonFatalThrowable(throwable)\n  \n    def divideByZero: MyError = DivideByZero\n  }\n\n  def divide100By(n: Int): MyError \\/ Int =\n    if (n === 0)\n      MyError.divideByZero.left[Int]\n    else\n      (100 / n).right[MyError]\n\n  def doSomethingBad(n: Int): Int =\n    if (n < 0)\n      throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n    else\n      n * 2\n\n  def doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n    n: Int\n  ): F[MyError \\/ Int] =\n    catchNonFatalEitherT(\n      for {\n        b <- EitherT(pureOf(divide100By(n)))\n        c <- eitherTRight[MyError](doSomethingBad(b))\n      } yield c\n    )(MyError.nonFatalThrowable).run\n\n  def main(args: Array[String]): Unit = {\n    val executorService: ExecutorService =\n      Executors.newWorkStealingPool(Runtime.getRuntime.availableProcessors())\n    implicit val ec: ExecutionContext = ExecutionContext.fromExecutorService(executorService)\n    \n    try {\n      val fa = doSomething[Future](-1)\n      println(fa)\n      val result = Await.result(fa, 1.second)\n      println(result)\n      result match {\n        case \\/-(b) =>\n          println(s"Result is $b")\n        case -\\/(a) =>\n          println(s"Result: Failed with $a")\n      }\n    } finally {\n      ExecutorServiceOps.shutdownAndAwaitTermination(executorService, 1.second)\n    }\n  }\n}\nMyApp.main(Array.empty)\n// Future(<not completed>)\n// -\\/(NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]))\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n'))),Object(o.b)(l.a,{value:"id",mdxType:"TabItem"},Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"NOTE")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use of ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," is not recommended as ",Object(o.b)("inlineCode",{parentName:"p"},"Id")," means having no ",Object(o.b)("inlineCode",{parentName:"p"},"Effect"),". Use it only for some special cases like testing."))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scala"},'import scalaz._\nimport Scalaz._\n\nimport effectie.scalaz._\nimport effectie.scalaz.Effectful._\nimport effectie.scalaz.Catching._\nimport effectie.scalaz.EitherTSupport._\n\nsealed trait MyError\nobject MyError {\n  final case class NonFatalThrowable(throwable: Throwable) extends MyError\n  case object DivideByZero extends MyError\n  \n  def nonFatalThrowable(throwable: Throwable): MyError\n    = NonFatalThrowable(throwable)\n\n  def divideByZero: MyError = DivideByZero\n}\n\ndef divide100By(n: Int): MyError \\/ Int =\n  if (n === 0)\n    MyError.divideByZero.left[Int]\n  else\n    (100 / n).right[MyError]\n\ndef doSomethingBad(n: Int): Int =\n  if (n < 0)\n    throw new IllegalArgumentException(s"n cannot be a negative number. [n: $n]")\n  else\n    n * 2\n\ndef doSomething[F[_]: EffectConstructor: CanCatch: Monad](\n  n: Int\n): F[MyError \\/ Int] =\n  catchNonFatalEitherT(\n    for {\n      b <- EitherT(pureOf(divide100By(n)))\n      c <- eitherTRight[MyError](doSomethingBad(b))\n    } yield c\n  )(MyError.nonFatalThrowable).run\n\nval fa = doSomething[Id](-1)\n// fa: Id[MyError \\/ Int] = -\\/(\n//   a = NonFatalThrowable(\n//     throwable = java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100]\n//   )\n// )\nfa match {\n  case \\/-(b) =>\n    println(s"Result is $b")\n  case -\\/(a) =>\n    println(s"Result: Failed with $a")\n}\n// Result: Failed with NonFatalThrowable(java.lang.IllegalArgumentException: n cannot be a negative number. [n: -100])\n')))))}u.isMDXComponent=!0}}]);